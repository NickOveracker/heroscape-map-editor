/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from '@react-three/drei'

export function InterlockHex({ type }: { type: string }) {
  switch (type) {
    case '0':
      return <InterlockHex0 />
    case '1':
      return <InterlockHex1 />
    case '2':
      return <InterlockHex2 />
    case '3':
      return <InterlockHex3 />
    case '4':
      return <InterlockHex4 />
    case '4B':
      return <InterlockHex4B />
    case '5':
      return <InterlockHex5 />
    case '6':
      return <InterlockHex6 />
    default:
      return <></>
  }
}
export function InterlockHex0() {
  const { nodes } = useGLTF('/interlock-hex-0.glb') as any
  return (
    < >
      <mesh
        geometry={nodes.Interlock0.geometry}
      >
        <meshMatcapMaterial color={'red'} />
      </mesh>
    </>
  )
}
useGLTF.preload('/interlock-hex-0.glb')

export function InterlockHex1() {
  const { nodes } = useGLTF('/interlock-hex-1.glb') as any
  return (
    < >
      <mesh
        geometry={nodes.Interlock1.geometry}
      >
        <meshMatcapMaterial color={'red'} />
      </mesh>
    </>
  )
}
useGLTF.preload('/interlock-hex-1.glb')

export function InterlockHex2() {
  const { nodes } = useGLTF('/interlock-hex-2.glb') as any
  return (
    < >
      <mesh
        geometry={nodes.Interlock2.geometry}
      >
        <meshMatcapMaterial color={'red'} />
      </mesh>
    </>
  )
}
useGLTF.preload('/interlock-hex-2.glb')

export function InterlockHex3() {
  const { nodes } = useGLTF('/interlock-hex-3.glb') as any
  return (
    < >
      <mesh
        geometry={nodes.Interlock3.geometry}
      >
        <meshMatcapMaterial color={'red'} />
      </mesh>
    </>
  )
}
useGLTF.preload('/interlock-hex-3.glb')

export function InterlockHex4() {
  const { nodes } = useGLTF('/interlock-hex-4.glb') as any
  return (
    < >
      <mesh
        geometry={nodes.Interlock4.geometry}
      >
        <meshMatcapMaterial color={'red'} />
      </mesh>
    </>
  )
}
useGLTF.preload('/interlock-hex-4.glb')

export function InterlockHex4B() {
  const { nodes } = useGLTF('/interlock-hex-4B.glb') as any
  return (
    < >
      <mesh
        geometry={nodes.Interlock4B.geometry}
      >
        <meshMatcapMaterial color={'red'} />
      </mesh>
    </>
  )
}
useGLTF.preload('/interlock-hex-4B.glb')

export function InterlockHex5() {
  const { nodes } = useGLTF('/interlock-hex-5.glb') as any
  return (
    < >
      <mesh
        geometry={nodes.Interlock5.geometry}
      >
        <meshMatcapMaterial color={'red'} />
      </mesh>
    </>
  )
}
useGLTF.preload('/interlock-hex-5.glb')

export function InterlockHex6() {
  const { nodes } = useGLTF('/interlock-hex-6.glb') as any
  return (
    < >
      <mesh
        geometry={nodes.Interlock6.geometry}
      >
        <meshMatcapMaterial color={'red'} />
      </mesh>
    </>
  )
}
useGLTF.preload('/interlock-hex-6.glb')
